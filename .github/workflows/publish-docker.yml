name: Publish main JupyterLab image
# To use this workflow:
# * Add secrets CONTAINER_REGISTRY_GITHUB_TOKEN to your GitHub repository
# * Change the IMAGE_NAME to yours
# * Enable automated build if you wish
env:
  IMAGE_NAME: jupyterlab
on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1'
    # Run at 03:00 on Monday to update to latest jupyter/docker-stack
  push:
    # Publish `main` branch as Docker `latest` image.
    branches:
      - main
      - dev
    paths:
    - 'Dockerfile'
    - 'jupyter_notebook_config.py'
    - 'settings.json'
    - '.github/workflows/publish-docker.yml'
    # # Publish `v1.2.3` tags as release `1.2.3`.
    # tags:
    #   - v*

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ghcr.io
      #     username: ${{github.actor}}
      #     password: ${{secrets.GITHUB_TOKEN}}

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
