---
kind: Template
apiVersion: template.openshift.io/v1
message: |-
  The following Jupyter Notebook have been created in your project: ${APPLICATION_NAME}.

  For more information about using this template, including OpenShift considerations, see https://maastrichtu-ids.github.io/dsri-documentation/docs/deploy-jupyter
metadata:
  name: jupyterlab-restricted-ephemeral
  annotations:
    openshift.io/display-name: JupyterLab with restricted user (Ephemeral)
    # openshift.io/display-name: JupyterLab S2I Quickstart (Ephemeral)
    description: |-
      Start JupyterLab images with regular 'jovyan' user, without sudo rights, using Source-to-Image build (S2I). 
      See the jupyter-on-openshift project: https://github.com/jupyter-on-openshift/jupyter-notebooks

      Provide a Git URL containing the packages to install and the source code to be cloned at start of the Notebook.
      The container will install requirements from files in the provided git repository:
      - .s2i/bin/assemble: run script to install packages with sudo during build. See example: https://github.com/MaastrichtU-IDS/covid-kg-notebooks/tree/master/.s2i/bin
      - requirements.txt: install pip packages

      With this template you can install pip packages and JupyterLab extensions, but nothing that requires root privileges (such as installing apt or yum packages)
      Use "JupyterLab with the root user" templates to have root privileges.
      
      Data will be lost when the pod is deleted.
    iconClass: icon-python
    tags: python,jupyter
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs/deploy-jupyter
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
    template.openshift.io/bindable: 'false'
labels:
  template: jupyterlab-restricted-ephemeral
parameters:
- name: APPLICATION_NAME
  displayName: Application name
  description: Must be unique in the project. It will be used to generate the application
    URL.
  value: jupyterlab-ephemeral
  required: true
- name: JUPYTER_NOTEBOOK_PASSWORD
  displayName: Notebook password
  description: The password of the Jupyter Notebook. It will be stored securely in
    Resources > Secrets and cannot be read.
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  required: true
- name: NOTEBOOK_INTERFACE
  displayName: Notebook interface
  description: Can be classic or lab.
  value: lab
- name: NOTEBOOK_MEMORY
  displayName: Notebook memory
  description: Maximum RAM available for the Jupyter Notebook application
  value: 5Gi
  required: true
- name: BUILDER_IMAGE
  displayName: S2I Builder image
  description: The Source-to-Image (S2I) Builder image used to build the final image
    (minimal, scipy or tensorflow)
  value: s2i-minimal-notebook:3.6
  required: true
- name: GIT_REPOSITORY_URL
  displayName: Git repository URL
  description: URL to the Git repository that will be cloned. Dependencies declared
    in the requirements.txt or requirements.yml  will be installed, 
    and the script at .s2i/bin/assemble will be run during the build.
  # value: https://github.com/MaastrichtU-IDS/covid-kg-notebooks
  required: true
- name: GIT_REFERENCE
  displayName: Git repository branch
  description: Branch of the Git repository to clone.
  value: master
  required: true

objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-password: "{.data['application-password']}"
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  stringData:
    application-password: "${JUPYTER_NOTEBOOK_PASSWORD}"

- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    lookupPolicy:
      local: true

- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    triggers:
    - type: ConfigChange
    - type: ImageChange
    source:
      type: Git
      git:
        uri: "${GIT_REPOSITORY_URL}"
        ref: "${GIT_REFERENCE}"
      contextDir: ''
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: "${BUILDER_IMAGE}"
          namespace: openshift
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}:latest"

- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - notebook
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        nodeSelector:
          dsri.unimaas.nl/cpu: 'true'
        containers:
        - name: notebook
          image: "${APPLICATION_NAME}:latest"
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              memory: "${NOTEBOOK_MEMORY}"
          env:
          - name: JUPYTER_NOTEBOOK_PASSWORD
            valueFrom:
              secretKeyRef:
                key: application-password
                name: "${APPLICATION_NAME}"
          - name: JUPYTER_NOTEBOOK_INTERFACE
            value: "${NOTEBOOK_INTERFACE}"
        automountServiceAccountToken: false

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"

- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
